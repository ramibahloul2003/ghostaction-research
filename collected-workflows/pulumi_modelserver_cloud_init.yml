#!/bin/bash

set -e

# Update and upgrade system packages
apt update -y && apt upgrade -y

# Install required packages for Docker installation
apt install -y ca-certificates curl gnupg

# Add the official Docker GPG key
install -m 0755 -d /etc/apt/keyrings
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
chmod a+r /etc/apt/keyrings/docker.gpg

# Configure the Docker repository
echo \
"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
$(. /etc/os-release && echo "$VERSION_CODENAME") stable" | \
tee /etc/apt/sources.list.d/docker.list > /dev/null

# Install Docker Engine and plugins
apt update -y
apt install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin

echo "Docker installed: $(docker --version)"

# Create model directories and set permissions
mkdir -p /var/models/staging /var/models/prod
chown -R $USER:docker /var/models
chmod -R 775 /var/models

# Create demo user for SFTP upload if not exists
if ! id demo &>/dev/null; then
  useradd -m -s /bin/bash demo
fi
usermod -aG docker demo

# Download TensorFlow Serving Docker image
docker pull tensorflow/serving

# Run TensorFlow Serving container (if not already running)
if ! docker ps -a --format '{{.Names}}' | grep -w tensorflow_serving; then
  docker run -d --name tensorflow_serving -p 8501:8501 \
    -v /var/models/prod:/models/my_model \
    -e MODEL_NAME=my_model tensorflow/serving
fi